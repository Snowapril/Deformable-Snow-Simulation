/**
 * @file ToonRoot.h
 * @author snowapril (https://github.com/Snowapril)
 * @brief the heart of the toon engine. this class manage whole plugins and controll the flow of this engine.
 * 
 * @version 0.1
 * @date 2019-05-25
 * 
 * @copyright Copyright (c) 2019
 */
#ifndef TOON_ROOT_H
#define TOON_ROOT_H

#include "ToonHeaderPrefix.h"
#include "ToonPrerequisites.h"

#include <ToonSingleton.h>
#include <INIParser.h>
#include <string>
#include <memory>
#include <stack>

struct GLFWwindow;

namespace Toon
{
	/****************************************************************************
				ToonRoot class declaration
	****************************************************************************/

	/**
	 * @brief the heart of the toon engine.
	 * manage whole plugins what ToonEngine need for.
	 * manage init order and shutdown order of the plugins.
	 * control the toon engine loop.
	 */
	class ToonRoot : public Common::Singleton<ToonRoot>
	{
		using super_t = Common::Singleton<ToonRoot>;
	protected:
		std::unique_ptr<RenderSystem>		renderSystem;
		std::unique_ptr<Logger>				logger;
		std::unique_ptr<Filesystem>			filesystem;
		std::unique_ptr<Timer>				timer;
	protected:
		/**
		 * @brief 
		 * 
		 */
		void initialUpdate	(  void	 );
		/**
		 * @brief This step is for releasing whole plugins of the engine root.
		 * 
		 */
		void release		(  void  );
	private:
		/**
		 * @brief initialize the subsystems with given ini config file.
		 * 
		 * @return true  if initialization was successful, return true.
		 * @return false if initialization was failed, return false. (Because of ini config file path was wrong, the variables in the config file were wrong, etc...)
		 */
		bool initSubsystems(ToonResourceParser::INIParser const&);
	public:
		ToonRoot();
		~ToonRoot();

		/**
		 * @brief initialize the toon engine with several setting parameters.
		 * 
		 * @param autoCreateWindow if true, ignore user input configure settings and initialize engine automatically (by default setting values).
		 * @param windowTitle title of the window which generated by this engine.
		 * @param configFilePath configure file path which will be used for initializing engine and subsystems.
		 * @return true  if initialization was successful, return true.
		 * @return false if initialization was failed, return false.
		 */
		bool initialize(bool autoCreateWindow = true, std::string const & windowTitle = "Deformable Snow Simulation", std::string const & configFilePath = "");
		/**
		 * @brief run the main loop of the toon engine
		 *
		 * @return int return exit code.
		 */
		int  runMainLoop(void) noexcept; 
	};
};

#include "ToonHeaderPostfix.h"

#endif